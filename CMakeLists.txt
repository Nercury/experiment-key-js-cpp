project(key)

cmake_minimum_required(VERSION 2.8)

# specify boost version used
set(KEYLIB_WIN_BOOST_VERSION "1.43")
# convert point to underscore in version name
STRING(REGEX REPLACE "\\." "_" KEYLIB_WIN_BOOST_VERSION_UNDERSCORED ${KEYLIB_WIN_BOOST_VERSION})
# set mingw version (required to select appropriate boost library when linking)
set(KEYLIB_MINGW_VERSION "34")

set(KEYLIB_INCLUDES
	"${CMAKE_SOURCE_DIR}/../third-party-include")

# Attempt to guess the compiler suffix
# stolen from FindBoost cmake file
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel"
	OR "${CMAKE_CXX_COMPILER}" MATCHES "icl"
	OR "${CMAKE_CXX_COMPILER}" MATCHES "icpc")
  if(WIN32)
	set (KEYLIB_LIB_COMPILER "iw")
  else()
	set (KEYLIB_LIB_COMPILER "il")
  endif()
elseif (MSVC90)
  SET (KEYLIB_LIB_COMPILER "vc90")
elseif (MSVC10)
  SET (KEYLIB_LIB_COMPILER "vc100")
elseif (MSVC11)
  SET (KEYLIB_LIB_COMPILER "vc110")
elseif (MSVC80)
  SET (KEYLIB_LIB_COMPILER "vc80")
elseif (MSVC71)
  SET (KEYLIB_LIB_COMPILER "vc71")
elseif (MSVC70) # Good luck!
  SET (KEYLIB_LIB_COMPILER "vc7") # yes, this is correct
elseif (MSVC60) # Good luck!
  SET (KEYLIB_LIB_COMPILER "vc6") # yes, this is correct
elseif (BORLAND)
  SET (KEYLIB_LIB_COMPILER "bcb")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "SunPro")
  set(KEYLIB_LIB_COMPILER "sw")
elseif (MINGW)
  SET(KEYLIB_LIB_COMPILER "mgw") # no GCC version encoding prior to 1.34
elseif (UNIX)
  if (CMAKE_COMPILER_IS_GNUCXX)
	  IF(APPLE)
		SET(KEYLIB_LIB_COMPILER "xgcc")
	  ELSE()
		SET(KEYLIB_LIB_COMPILER "gcc")
	  ENDIF()
  endif (CMAKE_COMPILER_IS_GNUCXX)
endif()

if (WIN32)

else() # apple and unix, gcc

    set(CMAKE_CXX_FLAGS "-std=c++0x") # use c++0x

endif()

message("CMAKE_SIZEOF_VOID_P = ${CMAKE_SIZEOF_VOID_P}")

# detect architecture for windows
if (WIN32)
	if (CMAKE_CL_64 MATCHES 1)
		set(KEYLIB_LIB_ARCH "x64")
		message("64-bit Windows")
	else()
		set(KEYLIB_LIB_ARCH "x86")
		message("32-bit Windows")
	endif()
elseif(NOT APPLE)
	if(${CMAKE_SIZEOF_VOID_P} MATCHES "8")
		set(KEYLIB_LIB_ARCH "x64")
		message("64-bit Linux")
	else()
		set(KEYLIB_LIB_ARCH "x86")
		message("32-bit Linux")
	endif()
else()
	message("Sytem architecture detection may be incorrect for APPLE")
	set(KEYLIB_LIB_ARCH "x64")
endif()

if (MSVC)
	set(WITH_SHARED_LIBS NO)
	set(KEYLIB_LIBRARIES
		"${CMAKE_SOURCE_DIR}/../third-party-lib/windows/${KEYLIB_LIB_ARCH}-${KEYLIB_LIB_COMPILER}/${CMAKE_CFG_INTDIR}")
else()
	if (WIN32)
		set(KEYLIB_LIBRARIES
		"${CMAKE_SOURCE_DIR}/../third-party-lib/windows/${KEYLIB_LIB_ARCH}-${KEYLIB_LIB_COMPILER}")
	else()
		set(KEYLIB_LIBRARIES
		"${CMAKE_SOURCE_DIR}/../third-party-lib/linux/${KEYLIB_LIB_ARCH}-${KEYLIB_LIB_COMPILER}")
	endif()
endif()

### BOOST

if(WIN32) # libraries for windows are prepared in known location
	find_path(Boost_INCLUDE_DIRS boost/date_time.hpp
	  PATH_SUFFIXES
	  PATHS
	  ${KEYLIB_INCLUDES}
	)
	message("Using windows...")
	set(Boost_LOCAL FALSE)
	if (MSVC)
		message("Using msvc for boost on windows...")
		if (Boost_INCLUDE_DIRS)
			set(Boost_LOCAL TRUE)
		endif()
	elseif(MINGW)
		message("Using mingw for boost on windows...")
		set(Boost_LIBRARIES "libboost_thread-mgw${KEYLIB_MINGW_VERSION}-mt-${KEYLIB_WIN_BOOST_VERSION_UNDERSCORED}.a")
		set(Boost_FOUND TRUE)
	endif()
else()
	message("Searching for boost...")
	set(Boost_LOCAL FALSE)
	set(Boost_USE_STATIC_LIBS   ON)
	set(Boost_USE_MULTITHREADED ON)
	set(Boost_ADDITIONAL_VERSIONS "1.35" "1.35.0" "1.35.1" "1.36" "1.36.0" "1.36.1" "1.37" "1.37.0" "1.38" "1.38.0" "1.39" "1.39.0" "1.40" "1.40.0" "1.41" "1.41.0" "1.42.0" "1.43.0")
	find_package( Boost REQUIRED COMPONENTS date_time filesystem system thread)
endif()

if(Boost_FOUND OR Boost_LOCAL)
	include_directories(${Boost_INCLUDE_DIRS})
endif()

if(NOT (Boost_FOUND OR Boost_LOCAL))
	message("Boost libraries were not found. Please install libboost-all-dev libraries.")
endif()

### SDL

if(WIN32)
	if (MSVC)
		set(SDL_LIBRARY "${KEYLIB_LIBRARIES}/sdl-2/SDL.lib")
		set(SDLMAIN_LIBRARY "${KEYLIB_LIBRARIES}/sdl-2/SDLmain.lib")
	else()
		message("No SDL CMake configuration for your compiler.")
	endif()
else()
	### now this should require sdl-2 libraries... not fixed yet.
	find_package(SDL REQUIRED)
	if(SDL_FOUND)
		include_directories(${SDL_INCLUDE_DIR})
	endif()
	if(NOT SDL_FOUND)
		message("SDL libraries were not found. Please install libsdl-dev libraries.")
	endif()
endif()

### OpenCV

#find_package(OpenCV REQUIRED)

### OpenGL

if(APPLE)
	INCLUDE_DIRECTORIES ( /System/Library/Frameworks )
	FIND_LIBRARY(COCOA_LIBRARY Cocoa)
	FIND_LIBRARY(OpenGL_LIBRARY OpenGL )
	MARK_AS_ADVANCED (COCOA_LIBRARY
		OPENGL_LIBRARY)
elseif (WIN32)
	find_package(OpenGL REQUIRED)
endif()

### V8

include_directories("${KEYLIB_INCLUDES}/v8")

if(WIN32) # libraries for windows are prepared in known location
	if (MSVC)
		message("Using msvc for V8 on windows...")
		set(V8_LIBRARIES
				Ws2_32.lib
				WINMM.LIB
				${KEYLIB_LIBRARIES}/v8/v8preparser.lib
				${KEYLIB_LIBRARIES}/v8/v8.lib
			)
	elseif(MINGW)
		message("Using mingw for V8 on windows is not yet implemented.")
	endif()
else()

endif()

### bullet

include_directories("${KEYLIB_INCLUDES}/bullet")

if(WIN32) # libraries for windows are prepared in known location
	if (MSVC)
		message("Using msvc for bullet on windows...")
		set(BULLET_LIBRARIES
				${KEYLIB_LIBRARIES}/bullet/BulletCollision.lib
				${KEYLIB_LIBRARIES}/bullet/BulletDynamics.lib
				${KEYLIB_LIBRARIES}/bullet/BulletFileLoader.lib
				${KEYLIB_LIBRARIES}/bullet/BulletSoftBody.lib
				${KEYLIB_LIBRARIES}/bullet/BulletWorldImporter.lib
				${KEYLIB_LIBRARIES}/bullet/ConvexDecomposition.lib
				${KEYLIB_LIBRARIES}/bullet/HACD.lib
				${KEYLIB_LIBRARIES}/bullet/LinearMath.lib
				${KEYLIB_LIBRARIES}/bullet/OpenGLSupport.lib
				)
	elseif(MINGW)
		message("Using mingw for bullet on windows is not yet implemented.")
	endif()
else()

endif()

### OpenAL-Soft

if(WIN32) # libraries for windows are prepared in known location
	if (MSVC)
		message("Using msvc for OpenAL Soft on windows...")
		set(OPENAL_LIBRARIES
				${KEYLIB_LIBRARIES}/openal-soft/OpenAL32.lib
				)
	elseif(MINGW)
		message("Using mingw for bullet on windows is not yet implemented.")
	endif()
else()

endif()

#JSON

set(JSON_LIBRARY "json_vc71")

include_directories(${CMAKE_SOURCE_DIR})
include_directories(${KEYLIB_INCLUDES})
link_directories(${KEYLIB_LIBRARIES})

add_subdirectory(key-v8)
add_subdirectory(key-common)
add_subdirectory(key-window)
add_subdirectory(key-opengl)
add_subdirectory(key-render)
add_subdirectory(main)